MY LEARNING LOG
1. 建立仓库：git init; git add; git commit -. <messege>
2. 更新状态：git status; git diff; (上次提交后工作区修改)
            git log; git reflog; git reset;
            
            WORK_TREE -> STAGE（暂存区） -> MASTER_TREE
            更新  add                  commit    (跟踪修改)

            撤销操作：git checkout -- file(撤销工作区内容，回到上一次add或commit)
                     git reset HEAD <file>(撤销stage内容到工作区，再丢弃工作区内容)
                     提交到了版本库：版本回退 git reset --hard <版本id前几位>
                     
            删除操作：rm; git rm (commit); git 
            误删恢复 git checkout -- <file>
3. 分支：   创建分支 git checkout -b(create and switch to) "branch_name"
            git branch 查看当前分支
            git log --graph(... ...) 查看日志
            git merge: 分支合并
            合并冲突（conflict）：手动解决

            fast forward: 合并分支时会删去历史记录，看不到做过合并
            禁用 fast forward: (在 merge 时) e.g. merge --no-ff -m "merge with no ff" dev
            
            管理策略：
                1. master (main) 仅用来发布新版本，不干活
                2. 在dev上干活，添加每个人的分支，稳定后发布到master
                3. 分支修bug
        
            bug分支：未提交分支再建分支，储存分支 stash
            结束后： git stash list 查看刚才存的工作现场
            1. git stash apply (恢复刚才工作区) + git stash drop (删除stash)
            2. git stash pop  (从刚才恢复工作区并删除stash内容)
            
            添加新功能(feature分支)： git switch -c feature-vulcae
            丢弃未合并分支 git branch -D <branch_name>

            多人协作与远程库：
            git remote(查看远程库信息)
            git push origin <branch_name> 推送相应分支到远程库
            git clone (目标地址)
            git checkout -b dev origin/dev 创建远程origin的dev分支到本地 
            冲突解决：pull抓取远程更新在本地合并解决冲突
            总结：1. git push 推送自己的修改
                 2. 若推送失败尝试合并（git pull)
                 3. 若合并冲突，本地解决并提交
                 4. git oush
                
            rebase: 
             ?? 不懂
        
4. 标签管理: 版本库的一个快照，一个让人能记住的commit(版本号)eg. tag v1.2
            创建：  1. 切换到需要打标签的分支
                    2. git tag <tag_name>
                    3. 标签打在最新提交的 commit 上
                    or
                    1. git log 找到历史提交 commit id
                    2. git tag <tag_name> <commit_id>

            git tag可以查看标签，按字母排序

            带有说明的标签：
                1. 创建 git tag -a <tag_name> -m "说明" <commit_id>
                2. 查看 git show <tag_name>

            标签与commit挂钩，注意其与分支的关系   

            删除： git tag -d <tag_name>
            推送: git push origin <tag_name>
                    git push origin --tags(推送全部本地未推送标签)
            删除远程： 1. 本地删除； 2. git push origin :refs/tags/<tag_name>